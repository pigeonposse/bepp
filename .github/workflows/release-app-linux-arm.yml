###############################################################################
# RELEASE APP IN LINUX ARM64
# Note: Not working. 
#       Not use at the moment. 
#       So slow and api bins are not created in x64 enviroment
###############################################################################

name: üöÄüñ•Ô∏è Release APP in linux arm64
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Set number for release version'
        type: string
        required: true

env:
  GITHUB_TOKEN: ${{ github.token }}
  APP_PATH: packages/app
  BUNDLE_LINUX_ARM64_PATH: packages/app/src-tauri/target/aarch64-unknown-linux-gnu/release/bundle

###############################################################################
# JOBS
###############################################################################

jobs:
  release_apps:
    permissions:
      contents: write
      deployments: write
    runs-on: 'ubuntu-22.04' 
    timeout-minutes: 90
    env:
      UPDATED_VERSION: ${{ github.event.inputs.version }}
    steps:

      - uses: actions/checkout@v3
      - uses: pguyot/arm-runner-action@v2.5.2
        with:
          base_image: https://dietpi.com/downloads/images/DietPi_RPi-ARMv8-Bullseye.img.xz
          cpu: cortex-a53
          bind_mount_repository: true
          image_additional_mb: 10240
          optimize_image: false
          commands: |
            # Rust complains (rightly) that $HOME doesn't match eid home
            export HOME=/root
            # Workaround to CI worker being stuck on Updating crates.io index
            export CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse
            # Install setup prerequisites
            apt-get update -y --allow-releaseinfo-change
            apt-get upgrade -y
            apt-get autoremove -y
            apt-get install curl
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            . "$HOME/.cargo/env"
            curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash
            # Install framework specific packages
            apt-get install -y nodejs
            npm install -g pnpm
            apt-get install -y libwebkit2gtk-4.0-dev build-essential wget libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev
            # cargo install tauri-cli
            # SETUP
            pnpm install --no-frozen-lockfile
            # BUILD REQUERIMENTS FOR APP
            pnpm build:app 
            pnpm app build:linux-arm64

    #   #########################################################################
    #   # SETUP
    #   #########################################################################

    #   - name: ‚¨áÔ∏èüõë Cancel Previous Runs
    #     uses: styfle/cancel-workflow-action@0.12.1
    #   - name: ‚¨áÔ∏èüõé Checkout
    #     uses: actions/checkout@v4
    #   - name: ‚¨áÔ∏èü•° Install pnpm
    #     uses: pnpm/action-setup@v4
    #   - name: ‚¨áÔ∏èüü¢ Setup node
    #     uses: actions/setup-node@v4
    #     with:
    #       node-version: 20
    #       cache: 'pnpm'
    #    - name: ‚¨áÔ∏èüê≥ Set up QEMU	
    #     uses: docker/setup-qemu-action@v1
    #   - name: ‚¨áÔ∏èüê≥ Set up Docker Buildx
    #     uses: docker/setup-buildx-action@v1
    #   - name: ‚¨áÔ∏èüì¶ Install dependencies
    #     run: |
    #       pnpm install --no-frozen-lockfile


    #   #########################################################################
    #   # BUILD REQUERIMENTS FOR APP
    #   #########################################################################
   
    #   - name: üèó Build
    #     run: pnpm build:app 

      #########################################################################
      # RELEASE linux arm64
      #########################################################################

    #   - name: üñ•Ô∏è Build app (linux arm64)
    #     run: pnpm app build:linux-arm64
      - name: üñ•Ô∏è Release app (linux arm64)
        uses: ncipollo/release-action@v1
        with: 
          tag: "${{ env.UPDATED_VERSION }}"
          draft: false
          prerelease: false
          allowUpdates: true
          artifacts: "${{ env.BUNDLE_LINUX_ARM64_PATH }}/appimage/*.AppImage,${{ env.BUNDLE_LINUX_ARM64_PATH }}/deb/*.deb,${{ env.BUNDLE_LINUX_ARM64_PATH }}/rpm/*.rpm"
          omitBodyDuringUpdate: true


############################################################################### 
