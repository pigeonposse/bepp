###############################################################################
# RELEASE BINS
###############################################################################

name: 🚀🤖 Release action

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Set number for release version'
        type: string
        required: true

concurrency: ${{ github.workflow }}-${{ github.ref }}
env:
  GITHUB_TOKEN: ${{ github.token }}

###############################################################################
# JOBS
###############################################################################

jobs:
  deploy:
    runs-on: 'ubuntu-latest' 
    env:
      UPDATED_VERSION: ${{ github.event.inputs.version }}

    steps:

      #########################################################################
      # INIT
      #########################################################################

      - name: ⬇️🛑 Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.12.1
      - name: ⬇️🛎 Checkout
        uses: actions/checkout@v4
      - name: ⬇️🥡 Install pnpm
        uses: pnpm/action-setup@v4
      - name: ⬇️🟢 Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: ✅ test BEPP action
        uses: ./
        with:
          file: packages/_config/config/linux-ci.json

      #########################################################################
      # EXTRACT AND UPDATE VERSION
      #########################################################################

      - name: Extract Major Version
        id: extract_version
        run: |
          # Extract the major version number from the version input
          major_version=$(echo "${{ env.UPDATED_VERSION }}" | cut -d '.' -f 1)
          echo "MAJOR_VERSION=$major_version" >> $GITHUB_OUTPUT

      - name: Tag Repo
        uses: richardsimko/update-tag@v1
        with:
          tag_name: v${{steps.extract_version.outputs.MAJOR_VERSION}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    #   - name: Check and Update Release Tag
    #     id: update_tag
    #     run: |
    #       # Fetch all tags
    #       git fetch --tags
          
    #       # Check if a tag for the major version exists
    #       existing_tag=$(git tag -l "v${{ steps.extract_version.outputs.MAJOR_VERSION }}")
          
    #       if [ -z "$existing_tag" ]; then
    #         echo "No existing tag found for v${{ steps.extract_version.outputs.MAJOR_VERSION }}."
    #         echo "Creating new tag v${{ steps.extract_version.outputs.MAJOR_VERSION }}."
    #         # Create new tag for the major version
    #         git tag "v${{ steps.extract_version.outputs.MAJOR_VERSION }}"
    #         git push origin "v${{ steps.extract_version.outputs.MAJOR_VERSION }}"
    #       else
    #         echo "Tag v${{ steps.extract_version.outputs.MAJOR_VERSION }} already exists."
    #       fi
    #     env:
    #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


###############################################################################
